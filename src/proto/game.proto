syntax = "proto3"; 
//syntax = "proto2";
/*
添加新协议的规则
1.在game.proto文件添加新协议和结构
    enum Cmd添加协议id
	添加新协议和结构
2.在cmd_type添加新协议的id
3.在cmd_name_map.lua添加命令名字,服务引擎在启动
4.运行proto文件夹下的bat文件，重新生成新协议文件
5.重新编译服务引擎
*/
enum Stype{
	INVALIDI_STYPE = 0;
	AUTH_STYPE = 1;
	SYSTEM_STYPE = 2;
	LOGIC_STYPE =3;
}

enum Cmd {
	INVALID_CMD = 0;
	eGuestLoginReq = 1;
	eGuestLoginRes = 2;
	eReLoginRes = 3;
	eUserLostConn = 4;
	eEditProfileReq = 5;
	eEditProfileRes = 6;
	eAccountUpgradeReq = 7;
	eAccountUpgradeRes = 8;
	eUnameLoginReq = 9;
	eUnameLoginRes = 10;
	eLoginOutReq = 11;
	eLoginOutRes = 12;
	//系统服务器协议
	eGetUgameInfoReq = 13;
	eGetUgameInfoRes = 14;
	//每日奖励领取
	eRecvLoginBonuesReq = 15;
	eRecvLoginBonuesRes = 16;
	//排行榜
	eGetWorldRankUchipReq = 17;
	eGetWorldRankUchipRes = 18;
	//系统公告
	eGetSysMsgReq = 19;
	eGetSysMsgRes = 20;
	//登录logic服务器
	eLoginLogicReq = 21;
	eLoginLogicRes = 22;
	//加入地图,请求匹配
    eEnterZoneReq = 23;
	eEnterZoneRes = 24;
	//进入房间通知
	eEnterPlayNotify = 25;
	eEnterArriveNotify = 26;
	//玩家退出等待匹配
	eExitRoomReq = 27;
    eExitRoomRes = 28;
	//玩家退出等待匹配，通知给房间其他用户
	eUserExitRoomNotify = 29;
	//通知开始一句对战游戏
	eGameStartNotify = 30;
	//
	eUdpTest = 31;
	eLogicFrame = 32;
	eNextFrameOpts = 33;
}

message GuestLoginReq{
   string guest_key = 1; 
}

message UserCenterInfo{
	 string unick = 1;
	 int32 uface = 2;
	 int32 usex = 3; 
	 int32 uvip = 4;
	 int32 uid = 5;
}

message GuestLoginRes{
    int32 status = 1;
    UserCenterInfo userinfo=2;
}


message UnameLoginReq {
      string uname = 1;
	  string upwd_md5 = 2;
}

message UnameLoginRes{
      int32 status = 1;
      UserCenterInfo userinfo=2;
}

message EditProfileReq {
	  string unick = 1;
	  int32 uface = 2;
	  int32 usex = 3;
}

message EditProfileRes {
	  int32 status = 1;
}

message AccountUpgradeReq {
      string uname = 1; //登录的用户名，全局唯一，不是unick
	  string upwd_md5 = 2;
}

message AccountUpgradeRes {
      int32 status = 1;
}

message LoginOutRes {
      int32 status = 1;
}


message UserGameInfo {
	  int32 uchip = 1;
	  int32 uexp = 2;
	  int32 uvip = 3;
	  int32 uchip2 = 4;
	  int32 uchip3 = 5;
	  int32 udata1 = 6;
	  int32 udata2 = 7;
	  int32 udata3 = 8;
	  int32 bonues_status = 9;
	  int32 bonues = 10;
	  int32 days = 11;
}

message GetUgameInfoRes {
	  int32 status = 1;
	  UserGameInfo uinfo = 2; 
}

message RecvLoginBonuesRes {
	 int32 status = 1;	
}

message LoginLogicRes {
	 int32 status = 1;
}

message EnterZoneReq {
	 int32 zid = 1;
}

message EnterZoneRes {
	 int32 status = 1;
}

message EnterPlayNotify{
     int32 zid = 1;
	 int32 roomid = 2;
	 int32 seatid = 3;
	 int32 side = 4;
}

message EnterArriveNotify{
      string unick = 1;
	  int32 uface = 2;
	  int32 usex = 3;
	  int32 seatid = 4;
	  int32 side = 5;
}

message ExitRoomRes {
      int32 status = 1;
}

message UserExitRoomNotify{
     int32 seatid =1;
}


message PlayerMatchInfo {
	int32 heroid = 1;
	int32 seatid = 2;
	int32 side = 3;
}

message GameStartNotify {
	repeated PlayerMatchInfo players_match_info = 1; 
}

message LoginLogicReq {
	string udp_ip = 1;
	int32  udp_port = 2;
}

//帧时间数据
message OptionEvent {
	int32 seatid = 1;
	int32 opt_type = 2; //玩家操作枚举
	int32 x = 3;        //x,y可以存放操作的任何需要存储的数据
	int32 y = 4;  	
}

//每一个帧间隔全部的操作都存储在这个结构
message FrameOpts {
	int32 frameid = 1;  //当前帧id
	repeated OptionEvent opts = 2;   //当前frameid这一帧全部操作数据
}

//服务器同步给客户端未同步完成的帧(服务器发送到客户端)
message LogicFrame {
	int32 frameid = 1;                     //当前开始帧
	repeated FrameOpts unsync_frames = 2;  //未同步的帧
}

//下一帧全部操作(由客户端同步给服务器)
message NextFrameOpts {
	int32 frameid = 1;    //下一帧的id
	int32 zid = 2;
	int32 matchid = 3;
	int32 seatid = 4;
	repeated OptionEvent opts = 5;  //下一帧的全部操作
}



